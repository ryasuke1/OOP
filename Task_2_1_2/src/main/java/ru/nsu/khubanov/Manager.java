package ru.nsu.khubanov;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Manager {
    private static final Logger logger = LogManager.getLogger(Manager.class);

    private final PizzeriaConfig config;
    private final OrderQueue orderQueue;
    private final Storage storage;
    private final List<Baker> bakers;
    private final List<Courier> couriers;
    private final OrderGenerator orderGenerator;
    private boolean isAcceptingOrders = true;
    private boolean isRunning = true;

    public Manager(PizzeriaConfig config) {
        this.config = config;
        this.orderQueue = new OrderQueue(config.getStorageCapacity());
        this.storage = new Storage(config.getStorageCapacity());
        this.bakers = new ArrayList<>();
        this.couriers = new ArrayList<>();
        this.orderGenerator = new OrderGenerator(orderQueue, this);
    }

    public void start() throws InterruptedException {
        Random random = new Random();

        // –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        orderGenerator.start();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ–∫–∞—Ä–µ–π
        for (int i = 0; i < config.getNumBakers(); i++) {
            bakers.add(new Baker(i, 1000 + random.nextInt(2000), orderQueue, storage, this));
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–æ–≤
        for (int i = 0; i < config.getNumCouriers(); i++) {
            couriers.add(new Courier(i, 3, storage, this));
        }

        // –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
        bakers.forEach(Thread::start);
        couriers.forEach(Thread::start);

        // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        new TimerThread(this, config.getSimulationTime()).start();
    }

    public synchronized boolean isRunning() {
        return isRunning;
    }

    public synchronized boolean isAcceptingOrders() {
        return isAcceptingOrders;
    }

    public synchronized void stop() {
        logger.info("‚è≥ –ü–∏—Ü—Ü–µ—Ä–∏—è –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã! ‚è≥");
        isAcceptingOrders = false;
        orderGenerator.interrupt(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–æ–≤

        // –ñ–¥—ë–º, –ø–æ–∫–∞ –≤—Å–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        while (!orderQueue.isEmpty() || !storage.isEmpty()) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                break;
            }
        }

        logger.info("üèÅ –í—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∏—Ü—Ü–µ—Ä–∏—é...");

        isRunning = false;

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –ø–µ–∫–∞—Ä–µ–π –∏ –∫—É—Ä—å–µ—Ä–æ–≤
        bakers.forEach(Thread::interrupt);
        couriers.forEach(Thread::interrupt);

        // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        try {
            orderGenerator.join();
            for (Thread thread : bakers) {
                thread.join();
            }
            for (Thread thread : couriers) {
                thread.join();
            }
        } catch (InterruptedException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏", e);
        }

        logger.info(" –ü–∏—Ü—Ü–µ—Ä–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞.");
    }
}
